name: Create Release on Merge to Master

on:
  push:
    branches:
      - main

permissions:
  contents: write  # Required to create releases/tags

jobs:
  calculate-and-create-release:
    runs-on: macos-15

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Calculate Projected Version
        id: calculate-version
        shell: bash
        run: |
          set -x  # Enable debug mode to show each command being executed
          
          # Fetch tags and ensure at least a default tag exists
          git fetch --tags
          latest_tag=$(git tag --sort=-v:refname | head -n 1 || echo "0.0.0")
          
          if [[ -z "$latest_tag" ]]; then
            echo "DEBUG: Empty latest_tag, defaulting to 0.0.0"
            latest_tag="0.0.0"
          fi
          
          echo "DEBUG: Latest Tag (raw): $latest_tag"
          # Normalize the tag format by removing "v" prefix if present
          normalized_tag=${latest_tag#v}
          echo "DEBUG: Normalized Latest Tag: $normalized_tag"
          
          # Validate the format of the normalized tag
          if ! [[ "$normalized_tag" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "DEBUG: Invalid tag format, defaulting to 0.0.0"
            normalized_tag="0.0.0"
          fi
          
          # Initialize new_version at the start
          new_version=""
          bump_type="none"
          
          # Filter commits
          commits=$(git log $latest_tag..HEAD --no-merges --format=%s || echo "")
          echo "DEBUG: Commits found:"
          echo "$commits"

          # Export commit log to output safely
          echo "commits<<EOF" >> $GITHUB_OUTPUT
          echo "$commits" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
          # Debug: Commit count (handle empty commits properly)
          commit_count=0
          if [[ ! -z "$commits" ]]; then
            commit_count=$(echo "$commits" | grep -v '^$' | wc -l)
          fi
          echo "DEBUG: Number of commits: $commit_count"
          
          if [[ $commit_count -eq 0 ]]; then
            echo "DEBUG: No commits found, keeping current version"
            new_version="$normalized_tag"
          else
            # Count different types of commits
            major_count=$(echo "$commits" | grep -c '^major:' || echo "0")
            minor_count=$(echo "$commits" | grep -c '^feat:' || echo "0")
            patch_count=$(echo "$commits" | grep -c '^fix:' || echo "0")
            
            echo "DEBUG: Major commits: $major_count"
            echo "DEBUG: Minor commits: $minor_count"
            echo "DEBUG: Patch commits: $patch_count"
            
            # Determine bump type
            if [[ $major_count -gt 0 ]]; then
              bump_type="major"
            elif [[ $minor_count -gt 0 ]]; then
              bump_type="minor"
            elif [[ $patch_count -gt 0 ]]; then
              bump_type="patch"
            fi
            
            echo "DEBUG: Bump type determined: $bump_type"
            
            # Parse current version
            IFS="." read -r major minor patch <<< "$normalized_tag"
            echo "DEBUG: Parsed version - major: $major, minor: $minor, patch: $patch"
            
            case $bump_type in
              major)
                new_version="$((major + 1)).0.0" ;;
              minor)
                new_version="$major.$((minor + 1)).0" ;;
              patch)
                new_version="$major.$minor.$((patch + 1))" ;;
              none)
                new_version="$normalized_tag" ;;
            esac
          fi
          
          echo "DEBUG: Final new_version: '$new_version'"
          echo "new_version=$new_version" >> $GITHUB_OUTPUT

      - name: Check If New Version Is Needed
        id: check-version
        shell: bash
        run: |
          latest_tag=$(git tag --sort=-v:refname | head -n 1 || echo "0.0.0")
          echo "DEBUG: Latest tag: '$latest_tag'"
          new_version="${{ steps.calculate-version.outputs.new_version }}"
          echo "DEBUG: New version: '$new_version'"

          if git rev-parse "refs/tags/$new_version" >/dev/null 2>&1; then
            echo "DEBUG: Tag $new_version already exists. Skipping release."
            echo "skip_release=true" >> $GITHUB_OUTPUT
          elif [[ "$new_version" == "$latest_tag" ]]; then
            echo "DEBUG: No new version needed. Latest tag matches projected version."
            echo "skip_release=true" >> $GITHUB_OUTPUT
          else
            echo "DEBUG: New version needed. Proceeding with release."
            echo "skip_release=false" >> $GITHUB_OUTPUT
          fi

      - name: Generate DocC Documentation
        if: steps.check-version.outputs.skip_release == 'false'
        run: |
          mkdir -p docs
          swift package \
            --allow-writing-to-directory ./docs \
            generate-documentation \
            --target PKBoardsRNDSwiftPackage \
            --disable-indexing \
            --transform-for-static-hosting \
            --output-path ./docs

      - name: Commit and Push Docs
        if: steps.check-version.outputs.skip_release == 'false'
        env:
          VERSION: ${{ steps.calculate-version.outputs.new_version }}
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          # Check for changes in docs/
          if ! git diff --quiet -- docs; then
            git add docs
            git commit -m "docs: update documentation for version $VERSION"
            git push origin main
          else
            echo "No changes in documentation. Skipping commit."
          fi


      - name: Create Release
        if: steps.check-version.outputs.skip_release == 'false'
        run: |
          gh release create ${{ steps.calculate-version.outputs.new_version }} \
            --title "Release ${{ steps.calculate-version.outputs.new_version }}" \
            --notes "## What's Changed
          ${{ steps.calculate-version.outputs.commits }}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
