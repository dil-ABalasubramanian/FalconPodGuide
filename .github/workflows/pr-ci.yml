name: Pull Request CI/CD

on:
  pull_request:
    branches:
      - '**'

jobs:
  test-and-validate:
    runs-on: macos-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Debug Directory
        run: ls -R

      - name: Install Dependencies
        run: swift package resolve

      - name: Run Tests and Capture Results
        id: run-tests
        run: |
          swift test --enable-code-coverage > test-results.txt
          tail -n 20 test-results.txt > summarized-tests.txt

      - name: Calculate Projected Version
        id: calculate-version
        shell: bash
        run: | 
          # Fetch tags and ensure at least a default tag exists
          git fetch --tags
          latest_tag=$(git tag --sort=-v:refname | head -n 1 || echo "0.0.0")
          
          if [[ -z "$latest_tag" ]]; then
            echo "DEBUG: Empty latest_tag, defaulting to 0.0.0"
            latest_tag="0.0.0"
          fi
          
          echo "DEBUG: Latest Tag (raw): $latest_tag"
          # Normalize the tag format by removing "v" prefix if present
          normalized_tag=${latest_tag#v}
          echo "DEBUG: Normalized Latest Tag: $normalized_tag"
          
          # Validate the format of the normalized tag
          if ! [[ "$normalized_tag" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "DEBUG: Invalid tag format, defaulting to 0.0.0"
            normalized_tag="0.0.0"
          fi
          
          # Initialize new_version at the start
          new_version=""
          bump_type="none"
          
          # Filter commits
          commits=$(git log $latest_tag..HEAD --no-merges --format=%s || echo "")
          echo "DEBUG: Commits found:"
          echo "$commits"
          
          # Debug: Commit count (handle empty commits properly)
          commit_count=0
          if [[ ! -z "$commits" ]]; then
            commit_count=$(echo "$commits" | grep -v '^$' | wc -l)
          fi
          echo "DEBUG: Number of commits: $commit_count"
          
          if [[ $commit_count -eq 0 ]]; then
            echo "DEBUG: No commits found, keeping current version"
            new_version="$normalized_tag"
          else
            # Count different types of commits
            major_count=$(echo "$commits" | grep -c '^major:' || echo "0")
            minor_count=$(echo "$commits" | grep -c '^feat:' || echo "0")
            patch_count=$(echo "$commits" | grep -c '^fix:' || echo "0")
            
            echo "DEBUG: Major commits: $major_count"
            echo "DEBUG: Minor commits: $minor_count"
            echo "DEBUG: Patch commits: $patch_count"
            
            # Determine bump type
            if [[ $major_count -gt 0 ]]; then
              bump_type="major"
            elif [[ $minor_count -gt 0 ]]; then
              bump_type="minor"
            elif [[ $patch_count -gt 0 ]]; then
              bump_type="patch"
            fi
            
            echo "DEBUG: Bump type determined: $bump_type"
            
            # Parse current version
            IFS="." read -r major minor patch <<< "$normalized_tag"
            echo "DEBUG: Parsed version - major: $major, minor: $minor, patch: $patch"
            
            # Handle special cases first
            if [[ "$normalized_tag" == "0.0.0" || "$normalized_tag" == "0.0.1" ]]; then
                echo "DEBUG: Special case - 0.0.0 or 0.0.1"
                if [[ "$bump_type" != "none" ]]; then
                    new_version="1.0.0"
                else
                    new_version="$normalized_tag"
                fi
            else
                echo "DEBUG: Regular version bump case"
                case $bump_type in
                    major)
                        echo "DEBUG: Performing major bump"
                        new_version="$((major + 1)).0.0"
                        ;;
                    minor)
                        echo "DEBUG: Performing minor bump"
                        new_version="$major.$((minor + 1)).0"
                        ;;
                    patch)
                        echo "DEBUG: Performing patch bump"
                        new_version="$major.$minor.$((patch + 1))"
                        ;;
                    none)
                        echo "DEBUG: No bump needed"
                        new_version="$normalized_tag"
                        ;;
                esac
            fi
          fi
          
          echo "DEBUG: Final new_version: '$new_version'"
          
          if [[ -z "$new_version" ]]; then
            echo "Error: new_version is empty! Debugging info:"
            echo "Latest tag: $latest_tag"
            echo "Normalized tag: $normalized_tag"
            echo "Bump type: $bump_type"
            echo "Commit count: $commit_count"
            exit 1
          fi
          
          echo "Bump Type: $bump_type"
          echo "Projected Version: $new_version"
          echo "new_version=$new_version" >> $GITHUB_ENV

      - name: Remove Previous Comments
        uses: actions/github-script@v6
        with:
          script: |
            const prNumber = context.payload.pull_request.number;
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
            });

            for (const comment of comments) {
              if (comment.user.login === 'github-actions[bot]') {
                await github.rest.issues.deleteComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  comment_id: comment.id,
                });
              }
            }

      - name: Post New Comment on PR
        if: always()  # Always include results
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const prNumber = context.payload.pull_request.number;

            // Read test results
            const testResults = fs.readFileSync('summarized-tests.txt', 'utf8');

            // Read commit validation output if exists
            let commitValidation = '';
            try {
              commitValidation = fs.readFileSync('comment.txt', 'utf8');
            } catch (error) {
              commitValidation = 'Commit messages are valid.';
            }

            // Read the projected version from environment variables
            const projectedVersion = process.env.new_version || 'Unable to determine';

            // Create the PR comment
            const comment = `
            ### Commit Validation
            ${commitValidation}

            ### Projected Version
            \`\`\`
            ${projectedVersion}
            \`\`\`
            ### Test Results
            \`\`\`
            ${testResults}
            \`\`\`
            `;

            // Post the comment to the PR
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
              body: comment.trim(),
            });

      - name: Generate DocC Documentation
        run: |
          mkdir -p docs
          swift package \
            --allow-writing-to-directory ./docs \
            generate-documentation \
            --target PKBoardsRNDSwiftPackage \
            --disable-indexing \
            --transform-for-static-hosting \
            --output-path ./docs

      - name: Commit and Push Docs
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          # Check for changes in docs/
          if ! git diff --quiet -- docs; then
            git add docs
            git commit -m "docs: update documentation for version $new_version"
            git push origin main
          else
            echo "No changes in documentation. Skipping commit."
          fi
